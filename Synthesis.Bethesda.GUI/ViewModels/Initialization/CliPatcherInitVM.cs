using Noggog;
using Noggog.WPF;
using ReactiveUI;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reactive.Linq;

namespace Synthesis.Bethesda.GUI
{
    public class CliPatcherInitVM : PatcherInitVM
    {
        private readonly ObservableAsPropertyHelper<ErrorResponse> _CanCompleteConfiguration;
        public override ErrorResponse CanCompleteConfiguration => _CanCompleteConfiguration.Value;

        public CliPatcherVM Patcher { get; }

        private readonly ObservableAsPropertyHelper<string> _AutogeneratedName;
        public override string AutogeneratedName => _AutogeneratedName.Value;

        public CliPatcherInitVM(ProfileVM profile)
            : base(profile)
        {
            Patcher = new CliPatcherVM(profile);
            _CanCompleteConfiguration = Patcher.WhenAnyValue(x => x.PathToExecutable.ErrorState)
                .Cast<ErrorResponse, ErrorResponse>()
                .ToGuiProperty(this, nameof(CanCompleteConfiguration), ErrorResponse.Success);

            _AutogeneratedName = Patcher.WhenAnyValue(x => x.PathToExecutable.TargetPath)
                .Select(x =>
                {
                    try
                    {
                        return Path.GetFileNameWithoutExtension(x);
                    }
                    catch (Exception)
                    {
                        return "<Naming Error>";
                    }
                })
                .ToGuiProperty<string>(this, nameof(AutogeneratedName));
        }

        public override async IAsyncEnumerable<PatcherVM> Construct()
        {
            yield return Patcher;
        }
    }
}
